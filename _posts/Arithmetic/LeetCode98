---
layout: post
title: markdown 算法LeetCode98题
category: other
tags: [other]
---

## LeetCode No.98 Title

### 题目内容（编程语言Java）
Given a binary tree, determine if it is a valid binary search tree (BST).
<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->
Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
<!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} -->

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

#### 解读
遍历二叉搜索树（BST）
二叉树：父节点当且仅有2个节点，并且左节点必须小于右节点。
最坏运行时间O（lgN）-->lgN是以2为底的
二叉搜索树的这一性质允许我们通过一个递归算法来按序输出二叉搜索树中的所有关键字。这种算法称为中序遍历
先序遍历中的根的关键字在其左右子树的关键字之前，而后序遍历中的根的关键字在其左右子树的关键字之后。
```
代码区

```